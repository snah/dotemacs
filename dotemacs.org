#+TITLE: Main Emacs configuration file

[[~/.localemacs.d/dotemacs.org][local config]]

* Definitions
** Paths
#+begin_src emacs-lisp
  (defvar dot-file "~/.emacs.d/dotemacs.org")
  (defvar emacs-help-file "~/share/personal/digital_life/emacs.org")
  (defvar master-help-file "~/share/personal/")
#+end_src
* Local configuration
  File paths
#+begin_src emacs-lisp
  (setq local-dotemacs-file "~/.localemacs.d/dotemacs.org")
  (setq local-dotemacs-template-file "~/.emacs.d/local_template.org")
#+end_src
  If no local config exists, create from template
#+begin_src emacs-lisp
  (unless (file-exists-p (file-name-directory local-dotemacs-file))
    (make-directory (file-name-directory local-dotemacs-file)))
  (unless (file-exists-p local-dotemacs-file)
    (copy-file local-dotemacs-template-file local-dotemacs-file)))
#+end_src
  Load local configuration
#+begin_src emacs-lisp
(org-dotemacs-load-file nil local-dotemacs-file)
#+end_src
* Security
#+begin_src emacs-lisp
  (setq enable-local-variables nil)
#+end_src 
* Appearance
  Set up theme with some customization:
#+begin_src emacs-lisp
  (load-theme 'wombat)
  (custom-theme-set-faces
   'user
   '(org-level-1 ((t (:foreground "#40C040" :weight bold))))
   '(org-level-2 ((t (:foreground "#60C0B0" :weight bold))))
   '(org-level-3 ((t (:foreground "#60D0FF"))))
   '(org-level-4 ((t (:foreground "#5070FF"))))
   '(org-level-5 ((t (:foreground "#B066FF"))))
   '(org-level-6 ((t (:foreground "#D066C0"))))
   '(org-level-7 ((t (:foreground "#D08080"))))
   '(org-level-8 ((t (:foreground "#A04040"))))
   '(org-list-dt ((t (:foreground "#A0D0E0" :weight bold))))
   '(org-quote ((t (:foreground "#D8E0A0" :family "Nimbus Sans"))))
   '(org-block-begin-line ((t (:foreground "#808040"))))
   '(org-block-end-line ((t (:foreground "#808040"))))

   '(vertical-border ((t (:foreground "#404040" :background "#000000")))))
#+end_src

  Start maximized:
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

  Other startup stuff
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

  Disable UI stuff:
#+begin_src emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
#+end_src

  Show line numbers.
  Need to do this selectivly as it causes a crash when opening pdf files.
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'linum-mode)
  (add-hook 'text-mode-hook 'linum-mode)
  (add-hook 'org-mode-hook 'linum-mode)
#+end_src

  Show more in the modeline
#+begin_src emacs-lisp
  (column-number-mode 1)
#+end_src
** Code related
   Better parentesis display
#+begin_src emacs-lisp
  (setq blink-matching-paren nil)
  (show-paren-mode t)
  (setq show-paren-delay 0)
#+end_src
* Behaviour
** Startup
  Show the home folder on startup:
#+begin_src emacs-lisp
  (setq initial-buffer-choice "~")
#+end_src
** indentation
   Do not use tabs for indentation in these files:
#+begin_src emacs-lisp
  (add-hook 'html-mode-hook
	    (lambda () (setq indent-tabs-mode nil)))
#+end_src
** dired
   Use other dired buffer as default target:
#+begin_src emacs-lisp
  (setq dired-dwim-target t)
#+end_src
* Packages
** Evil mode

 #+begin_src emacs-lisp
   (use-package evil
     :ensure t
     :config (evil-mode 1))
 #+end_src

*** Additions
    <<evil-mode/additions>>
 #+begin_src emacs-lisp
 (use-package evil-magit
   :ensure t)
 #+end_src

** Magit
 #+begin_src emacs-lisp
 (use-package magit
   :ensure t)
 #+end_src
   evil-magit is loaded in [[evil-mode/additions]]

** Org mode
   Make tabs behave right in src blocks:
   #+begin_src emacs-lisp
     (setq org-src-tab-acts-natively t)
   #+end_src
   Setup quote font faces
   #+begin_src emacs-lisp
   (setq org-fontify-quote-and-verse-blocks t)
   #+end_src
   Setup agenda mode
   #+begin_src emacs-lisp
     (setq org-agenda-files (directory-files-recursively "~/share/personal/" "^[[:alnum:]].*\\.org$"))
     (setq org-agenda-todo-list-sublevels nil)
   #+end_src
   Setup TODO keywords and their faces
   #+begin_src emacs-lisp
     (setq org-todo-keywords
	   '((sequence "SDAY(s)" "TODO(t)" "NEXT(n)" "|" "DONE(d)" "CLND(c)")
             (sequence "|" "WAIT(w)")
             (sequence "|" "PRIO(p)")
	     (sequence "NOK(b)" "|" "OK(o)")))
     (setq org-todo-keyword-faces
	   '(("SDAY" . "cyan")
	     ("NEXT" . "orange")
	     ("WAIT" . "yellow")
	     ("PRIO" . (:foreground "red" :bold t))
	     ("NOK" . (:foreground "red" :bold t))))
   #+end_src
   Setup capture templates
   #+begin_src emacs-lisp
     (setq org-capture-templates
	   '(("i" "Inbox" entry (file "~/share/personal/inbox/inbox.org")
	      "* TODO %?\n  %i\n")))
   #+end_src
** elpy
#+begin_src emacs-lisp
  (use-package elpy
  :ensure t
  :init
  (elpy-enable))
#+end_src
  Remove highlighted indentation (clutter)
#+begin_src emacs-lisp
  (add-hook 'elpy-mode-hook (lambda () (highlight-indentation-mode -1)))
#+end_src
** Diminish
   Hide modes from the list
#+begin_src emacs-lisp
  (use-package diminish
    :ensure t)
#+end_src
** Winner mode
 #+begin_src emacs-lisp
   (use-package winner
     :ensure t
     :init (winner-mode))
 #+end_src
** workgroups
   workgroups2 is not nearly as good as the original so use a local copy of workgroups
 #+begin_src emacs-lisp
   (add-to-list 'load-path "~/.emacs.d/manual_download")
   (require 'workgroups)
   (setq wg-prefix-key (kbd "C-c w"))
   (workgroups-mode)
   (setq wg-morph-on nil)
   (wg-load "~/.emacs_workgroups")
   (defun my-save-workgroups ()
     (wg-save "~/.emacs_workgroups"))
   (add-hook 'wg-switch-hook 'my-save-workgroups)
 #+End_src
** peep-dired
 #+begin_src emacs-lisp
   (use-package peep-dired
     :ensure t)
 #+end_src
** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :diminish
    :init
    (global-flycheck-mode t))
#+end_src
** Regular expressions
#+begin_src emacs-lisp
  (use-package pcre2el
    :ensure t
    :config (pcre-mode))
#+end_src
** Auto complete
#+begin_src emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (ac-config-default)
    (global-auto-complete-mode t))
#+end_src
** Aggressive indent mode
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :config (global-aggressive-indent-mode t))
#+end_src
** Expand region
  Region selection:
#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t)
#+end_src
** Try
 #+begin_src emacs-lisp
   (use-package try
     :ensure t)
 #+end_src
** Which-key
 #+begin_src emacs-lisp
   (use-package which-key
     :ensure t
     :diminish which-key-mode
     :config (which-key-mode))
 #+end_src
** Ivy and counsel
   #+begin_src emacs-lisp
     (use-package ivy
       :ensure t
       :diminish
       :bind (("C-s" . swiper)
	      :map ivy-minibuffer-map
	      ("<up>" . ivy-previous-history-element)
	      ("TAB" . ivy-alt-done)	
	      ("C-l" . ivy-alt-done)
	      ("M-j" . ivy-next-line)
	      ("M-k" . ivy-previous-line)
	      :map ivy-switch-buffer-map
	      ("M-k" . ivy-previous-line)
	      ("C-l" . ivy-done)
	      ("C-d" . ivy-switch-buffer-kill)
	      :map ivy-reverse-i-search-map
	      ("M-k" . ivy-previous-line)
	      ("C-d" . ivy-reverse-i-search-kill))
       :config (ivy-mode 1))

     (use-package counsel
       :ensure t)

     (use-package ivy-rich
       :ensure t
       :init (ivy-rich-mode 1))
   #+end_src
** All the icons
   #+begin_src emacs-lisp
     (defun aorst/font-installed-p (font-name)
       "Check if font with FONT-NAME is available."
       (if (find-font (font-spec :name font-name))
	   t
	 nil))
     (use-package all-the-icons
       :config
       (when (not (aorst/font-installed-p "all-the-icons"))
	 (all-the-icons-install-fonts t)))
   #+end_src
** Doom modeline
   #+begin_src emacs-lisp
   (use-package doom-modeline
   :ensure t
   :init (doom-modeline-mode 1)
   :config
   (doom-modeline-def-segment workspace-name
   "The current workspace name."
   (propertize (format " %s " (wg-name (wg-current-workgroup))) 'face
   (if (doom-modeline--active)
   'doom-modeline-buffer-major-mode
   'mode-line-inactive)))
   :custom ((doom-modeline-height 10)))
   
   (set-face-attribute 'mode-line nil :family "Source Code Pro" :height 180)
   (set-face-attribute 'mode-line-inactive nil :family "Source Code Pro" :height 180)
   #+enc_src

** Helpful
   
  #+begin_src emacs-lisp
    (use-package helpful
      :ensure t
      :custom
      (counsel-describe-function-function #'helpful-callable)
      (counsel-describe-variable-function #'helpful-variable)
      :bind
      ([remap describe-function] . counsel-describe-function)
      ([remap describe-command] . helpful-command)
      ([remap describe-variable] . counsel-describe-variable)
      ([remap describe-key] . helpful-key))
  #+end_src
** Rainbow mode
   Rainbow mode is nice but do not enable by default
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t)
#+end_src
* Custom packages
  #+begin_src emacs-lisp
    (if (bound-and-true-p load-dm-tools)
	(load "~/.emacs.d/pkg-gm-tools/gm-tools.el"))
  #+end_src
* Misc
** Dice rolling
#+begin_src emacs-lisp
  (defun roll (instr)
    "Roll dice as give in INSTR."
    (interactive "s")
    (message "%s" instr)
    (cond ((equal (string-trim instr) "1d6")
	   (message "[1d6]: %d" (+ 1 (random 6))))
	  ((equal instr "1d10")
	   (message "[1d6]: %d" (+ 1 (random 10))))
	  ((equal instr "1d20")
	   (message "[1d20]: %d" (+ 1 (random 20))))
	  ((equal instr "1d100")
	   (message "[1d100]: %d" (+ 1 (random 100))))))
#+end_src
* Key bindings
** Unmap confilcts
   Some keymaps try to overwrite my nice config, dont let them
#+begin_src emacs-lisp
  (evil-global-set-key 'motion " " nil)
  (define-key dired-mode-map "g" nil)
  (define-key dired-mode-map " " nil)
  (define-key compilation-mode-map "g" nil)
  (define-key compilation-mode-map " " nil)
#+end_src
** Generic
*** High level
**** Helper functions
  #+begin_src emacs-lisp
    (defun run-make ()
      (interactive)
      (shell-command "make"))
 #+end_src
**** Bindings
 #+begin_src emacs-lisp
   (evil-global-set-key 'normal " a" 'org-agenda-list)
   (evil-global-set-key 'normal " e" 'eval-last-sexp)
   (evil-global-set-key 'visual " e" 'eval-region)
   (evil-global-set-key 'normal " E" 'my-eval-buffer)
   (evil-global-set-key 'normal " f" 'find-file)
   (evil-global-set-key 'normal " g" 'magit-status)
   (evil-global-set-key 'normal " m" 'run-make)
   (evil-global-set-key 'normal " s" 'save-buffer)
   (evil-global-set-key 'normal " k" 'kill-current-buffer)

   ;; Commonly used files and buffers
   (evil-global-set-key 'motion (kbd "<f2>") (lambda () (interactive) (find-file dot-file)))
   (evil-global-set-key 'motion (kbd "<f3>") (lambda () (interactive) (find-file emacs-help-file)))
   (evil-global-set-key 'motion (kbd "<f4>") (lambda () (interactive) (find-file master-help-file)))

   (evil-global-set-key 'motion "gd" (lambda () (interactive) (dired nil)))
 #+end_src 
*** Movement and selection
 #+begin_src emacs-lisp
   (evil-global-set-key 'motion "\C-e" 'evil-scroll-up)
   (evil-global-set-key 'motion "go" 'other-window)
   (evil-global-set-key 'motion "gp" (lambda () (interactive) (other-window -1)))
   (evil-global-set-key 'insert "\C-k" 'previous-line)
   (evil-global-set-key 'insert "\C-j" 'next-line)

   ;; Selection
   (global-set-key (kbd "C-=") 'er/expand-region)

 #+end_src 
*** Window management
 #+begin_src emacs-lisp
   (evil-global-set-key 'motion " w " 'wg-switch-to-workgroup)
   (evil-global-set-key 'motion " ww" 'wg-switch-to-previous-workgroup)
   (evil-global-set-key 'motion " wc" 'wg-create-workgroup)
   (evil-global-set-key 'motion " wu" 'wg-update-workgroup)
   (evil-global-set-key 'motion " wr" 'wg-revert-workgroup)

   (evil-global-set-key 'motion " ws" 'delete-other-windows)
   (evil-global-set-key 'motion " wd" 'delete-window)
   (evil-global-set-key 'motion " wD" (lambda () (interactive) (kill-current-buffer) (delete-window)))
   (evil-global-set-key 'motion " wh" 'split-window-below)
   (evil-global-set-key 'motion " wv" 'split-window-right)

   (evil-global-set-key 'motion "gn" 'winner-undo)
   (evil-global-set-key 'motion "gm" 'winner-redo)
  #+end_src 
** Org mode
*** Helper functions
 #+begin_src emacs-lisp
   (defun insert-elisp-block ()
     (interactive)
     (kill-line 0)
     (insert "#+begin_src emacs-lisp\n")
     (insert "#+end_src")
     (evil-open-above 1)
     (insert "  ("))
#+end_src
*** Bindings
#+begin_src emacs-lisp
   (evil-global-set-key 'normal "\\be" 'insert-elisp-block)
   (evil-global-set-key 'normal "gj" 'org-next-visible-heading)
   (evil-global-set-key 'normal "gk" 'org-previous-visible-heading)
   (evil-global-set-key 'normal "gh" 'org-backward-heading-same-level)
   (evil-global-set-key 'normal "gl" 'org-forward-heading-same-level)
   (evil-global-set-key 'normal "gu" 'outline-up-heading)
   (evil-define-key 'insert org-mode-map (kbd "C-j") 'next-line)
   (evil-define-key 'insert org-mode-map (kbd "C-k") 'previous-line)
 #+end_src
** dired
*** Bindings
#+begin_src emacs-lisp
   (evil-define-key 'normal dired-mode-map (kbd "TAB") 'dired-maybe-insert-subdir)
 #+end_src
** Magit
   There is a problem where commiting wont work properly, as a
   workaround restore the following key mapping
#+begin_src emacs-lisp
  (evil-global-set-key 'normal "\C-c\C-c" 'with-editor-finish)
#+end_src
** peep-dired
*** helper functions
#+begin_src emacs-lisp
  (defun my-peep-mark-for-deletion ()
    (interactive)
    (dired-flag-file-deletion 1)
    (peep-dired-prev-file)
    (peep-dired-next-file))
#+end_src
**** TODO hook to dired-mark function instead of overwriting spererate bindings
*** bindings
#+begin_src emacs-lisp
  (evil-define-key 'normal peep-dired-mode-map (kbd "<SPC>") 'peep-dired-scroll-page-down
    (kbd "C-<SPC>") 'peep-dired-scroll-page-up
    (kbd "<backspace>") 'peep-dired-scroll-page-up
    (kbd "j") 'peep-dired-next-file
    (kbd "k") 'peep-dired-prev-file
    (kbd "d") 'my-peep-mark-for-deletion)
   (add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+end_src
** gnus
*** helper functions
    #+begin_src emacs-lisp
      (defun my-archive-from-inbox ()
	(interactive)
	(if (equal (buffer-name) "*Summary INBOX*")
	    (progn (let ((gnus-novice-user nil))
			(gnus-summary-delete-article))
		  (message "Article archived."))))

      (defun my-move-to-thrash ()
	(interactive)
	(if (equal (buffer-name) "*Summary INBOX*")
	    (progn (let ((gnus-novice-user nil))
			(gnus-summary-move-article :TO-NEWSGROUP "[Gmail]/Thrash"))
		  (message "Article moved to thrash."))))
    #+end_src
*** bindings
    #+begin_src emacs-lisp
      (define-key gnus-group-mode-map (kbd "k") 'previous-line)
      (define-key gnus-group-mode-map (kbd "j") 'next-line)
      (define-key gnus-group-mode-map (kbd ":") 'evil-ex)

      (define-key gnus-summary-mode-map (kbd "k") 'previous-line)
      (define-key gnus-summary-mode-map (kbd "j") 'next-line)
      (define-key gnus-summary-mode-map (kbd ":") 'evil-ex)

      (define-key gnus-summary-mode-map (kbd "m") 'gnus-summary-mark-as-processable)
      (define-key gnus-summary-mode-map (kbd "u") 'gnus-summary-unmark-as-processable)
      (define-key gnus-summary-mode-map (kbd "r") 'gnus-summary-rescan-group)

      (define-key gnus-summary-mode-map (kbd "a") 'my-archive-from-inbox)
      (define-key gnus-summary-mode-map (kbd "d") 'my-move-to-thrash)

      (setq gnus-process-mark ?m)
    #+end_src

* todos
*** History
*** Python
    [[https://cestlaz.github.io/posts/using-emacs-12-python/]]
    elpy
*** YAsnippet
    [[https://cestlaz.github.io/posts/using-emacs-13-yasnippet/]]
*** Counsel FZF
    [[https://cestlaz.github.io/posts/using-emacs-38-dired/]]
