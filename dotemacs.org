#+TITLE: Main Emacs configuration file

[[~/.localemacs.d/dotemacs.org][local config]]

* Definitions
** Paths
#+begin_src emacs-lisp
  (defvar dot-file "~/.emacs.d/dotemacs.org")
  (defvar master-help-file "~/share/personal/")
#+end_src
* Local configuration
  File paths
#+begin_src emacs-lisp
  (setq local-dotemacs-file "~/.localemacs.d/dotemacs.org")
  (setq local-dotemacs-template-file "~/.emacs.d/local_template.org")
#+end_src
  If no local config exists, create from template
#+begin_src emacs-lisp
  (unless (file-exists-p (file-name-directory local-dotemacs-file))
    (make-directory (file-name-directory local-dotemacs-file)))
  (unless (file-exists-p local-dotemacs-file)
    (copy-file local-dotemacs-template-file local-dotemacs-file)))
#+end_src
  Load local configuration
#+begin_src emacs-lisp
  (org-dotemacs-load-file nil local-dotemacs-file)
#+end_src
* Workgroups
** workgroups package
   workgroups2 is not nearly as good as the original so use a local copy of workgroups
 #+begin_src emacs-lisp
   (add-to-list 'load-path "~/.emacs.d/manual_download")
   (require 'workgroups)
   (setq wg-prefix-key (kbd "C-c w"))
   (workgroups-mode)
   (setq wg-morph-on nil)
   (setq wg-query-for-save-on-emacs-exit nil)
 #+End_src
** general
#+begin_src emacs-lisp
  (setq hanmar/workgroups (make-hash-table :test 'equal))

  (defun hanmar/wg-add (name function)
    (setf (gethash name hanmar/workgroups) function))

  (defun hanmar/wg-read-workgroup (&optional noerror)
    (wg-completing-read "Workgroup: " (hash-table-keys hanmar/workgroups)))

  (defun hanmar/wg-switch (name)
    (interactive (list (hanmar/wg-read-workgroup)))
    (message "wg-switch %s" name)
    (if (wg-get-workgroup 'name name t)
	(wg-switch-to-workgroup (wg-get-workgroup 'name name t))
      (hanmar/wg-load name)))

  (defun hanmar/wg-load (name)
    (message "wg-load %s" name)
    (wg-create-workgroup name)
    (delete-other-windows)
    (message "wg-load2 %s" name)
    (funcall (gethash name hanmar/workgroups))
    (message "wg-load3 %s" name)
    (wg-update-workgroup (wg-get-workgroup 'name name t))
    (message "wg-load4 %s" name))

   (run-hooks 'hanmar/wg-setup)
#+end_src 
* Security
#+begin_src emacs-lisp
  (setq enable-local-variables nil)
#+end_src 
* Appearance
** Startup
   Start maximized:
 #+begin_src emacs-lisp
   (add-to-list 'default-frame-alist '(fullscreen . maximized))
 #+end_src

   Other startup stuff
 #+begin_src emacs-lisp
   (setq inhibit-startup-message t)
 #+end_src
** UI
   Disable UI stuff:
 #+begin_src emacs-lisp
   (menu-bar-mode 0)
   (tool-bar-mode 0)
   (scroll-bar-mode 0)
 #+end_src
** General
   Show line numbers.
   Need to do this selectivly as it causes a crash when opening pdf files.
 #+begin_src emacs-lisp
   (add-hook 'prog-mode-hook 'linum-mode)
   (add-hook 'text-mode-hook 'linum-mode)
   (add-hook 'org-mode-hook 'linum-mode)
 #+end_src

   Show more in the modeline
 #+begin_src emacs-lisp
   (column-number-mode 1)
 #+end_src
 
   Highlight the current line
 #+begin_src emacs-lisp
   (global-hl-line-mode 1)
 #+end_src
** Theme
   Set up theme with some customization:
 #+begin_src emacs-lisp
   (load-theme 'wombat)
   (custom-theme-set-faces
    'user
    '(default ((t (:foreground "#F6F3E8" background "#242424"))))

    '(org-level-1 ((t (:foreground "#40C040" :weight bold))))
    '(org-level-2 ((t (:foreground "#60C0B0" :weight bold))))
    '(org-level-3 ((t (:foreground "#60D0FF"))))
    '(org-level-4 ((t (:foreground "#5070FF"))))
    '(org-level-5 ((t (:foreground "#B066FF"))))
    '(org-level-6 ((t (:foreground "#D066C0"))))
    '(org-level-7 ((t (:foreground "#D08080"))))
    '(org-level-8 ((t (:foreground "#A04040"))))
    '(org-list-dt ((t (:foreground "#A0D0E0" :weight bold))))
    '(org-quote ((t (:foreground "#D8E0A0"))))
    '(org-block-begin-line ((t (:foreground "#606030"))))
    '(org-block-end-line ((t (:foreground "#606030"))))

    '(org-agenda-done ((t (:foreground "#40C040"))))
    '(org-agenda-date-today ((t (:foreground "#60D0FF" :background "#404040"))))
    '(org-agenda-date ((t (:foreground "#4ca6cc"))))
    '(org-scheduled-today ((t (:foreground "#F8F870"))))
    '(org-scheduled ((t (:foreground "#D8E0A0"))))
    '(org-upcoming-deadline ((t (:foreground "#F6F3E8"))))
    '(org-upcoming-distant-deadline ((t (:foreground "#C4C2B9"))))
    '(org-warning ((t (:foreground "#F04040"))))
    '(org-agenda-calendar-event ((t (:foreground "#C4C2B9"))))

    '(vertical-border ((t (:foreground "#404040" :background "#000000")))))

    (set-face-attribute 'hl-line nil :inherit nil :background "#303030")

 #+end_src
 
   To find face under cursor:
   M-x global-hl-line-mode
   M-x describe-face
** Code related
   Better parentesis display
#+begin_src emacs-lisp
  (setq blink-matching-paren nil)
  (show-paren-mode t)
  (setq show-paren-delay 0)
#+end_src
* Behaviour
** indentation
   Do not use tabs for indentation in these files:
#+begin_src emacs-lisp
  (add-hook 'html-mode-hook
	    (lambda () (setq indent-tabs-mode nil)))
#+end_src
** dired
   Use other dired buffer as default target:
#+begin_src emacs-lisp
  (setq dired-dwim-target t)
#+end_src
* Packages
** Usability
*** Evil mode
  #+begin_src emacs-lisp
    (use-package evil
      :ensure t
      :config
      (evil-mode 1))
  #+end_src
**** Additions
     <<evil-mode/additions>>
  #+begin_src emacs-lisp
  (use-package evil-magit
    :ensure t)
  #+end_src
*** General
    #+begin_src elisp
    (use-package general
      :ensure t
      :config
      (general-create-definer hanmar/leader-keys
        :keymaps '(normal insert visual emacs)
        :prefix "SPC"
        :global-prefix "C-SPC"))
    #+end_src
    
**** Define key example:
     (general-define-key
       "M-x" 'amx
       "C-s" 'counsil-grep-or-swiper)
*** Which-key
  #+begin_src emacs-lisp
    (use-package which-key
      :ensure t
      :diminish which-key-mode
      :config (which-key-mode))
  #+end_src
*** Hydra
 #+begin_src emacs-lisp
   (use-package hydra
     :ensure t)
 #+end_src
*** Helpful
   
   #+begin_src emacs-lisp
     (use-package helpful
       :ensure t
       :custom
       (counsel-describe-function-function #'helpful-callable)
       (counsel-describe-variable-function #'helpful-variable)
       :bind
       ([remap describe-function] . counsel-describe-function)
       ([remap describe-command] . helpful-command)
       ([remap describe-variable] . counsel-describe-variable)
       ([remap describe-key] . helpful-key))
   #+end_src
*** Winner mode
  #+begin_src emacs-lisp
    (use-package winner
      :ensure t
      :init (winner-mode))
  #+end_src
*** Ivy and counsel
    #+begin_src emacs-lisp
      (use-package ivy
	:ensure t
	:diminish
	:bind (("C-s" . swiper)
	       :map ivy-minibuffer-map
	       ("<up>" . ivy-previous-history-element)
	       ("TAB" . ivy-alt-done)	
	       ("C-l" . ivy-alt-done)
	       ("M-j" . ivy-next-line)
	       ("M-k" . ivy-previous-line)
	       :map ivy-switch-buffer-map
	       ("M-k" . ivy-previous-line)
	       ("C-l" . ivy-done)
	       ("C-d" . ivy-switch-buffer-kill)
	       :map ivy-reverse-i-search-map
	       ("M-k" . ivy-previous-line)
	       ("C-d" . ivy-reverse-i-search-kill))
	:config (ivy-mode 1))

      (use-package counsel
	:ensure t)

      (use-package ivy-rich
	:ensure t
	:init (ivy-rich-mode 1))
    #+end_src
*** Auto complete
 #+begin_src emacs-lisp
   (use-package auto-complete
     :ensure t
     :init
     (ac-config-default)
     (global-auto-complete-mode t))
 #+end_src
*** Expand region
   Region selection:
 #+begin_src emacs-lisp
   (use-package expand-region
     :ensure t)
 #+end_src
*** Regular expressions
 #+begin_src emacs-lisp
   (use-package pcre2el
     :ensure t
     :config (pcre-mode))
 #+end_src
*** Yafolding
 #+begin_src emacs-lisp
   (use-package yafolding
     :ensure t)
 #+end_src
** Appearance
*** Diminish
    Hide modes from the list
 #+begin_src emacs-lisp
   (use-package diminish
     :ensure t)
 #+end_src
*** Doom modeline
    #+begin_src emacs-lisp
    (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (doom-modeline-def-segment workspace-name
    "The current workspace name."
    (propertize (format " %s " (wg-name (wg-current-workgroup))) 'face
    (if (doom-modeline--active)
    'doom-modeline-buffer-major-mode
    'mode-line-inactive)))
    :custom ((doom-modeline-height 10)))
    #+end_src
*** All the icons
    #+begin_src emacs-lisp
      (defun aorst/font-installed-p (font-name)
	"Check if font with FONT-NAME is available."
	(if (find-font (font-spec :name font-name))
	    t
	  nil))
      (use-package all-the-icons
	:config
	(when (not (aorst/font-installed-p "all-the-icons"))
	  (all-the-icons-install-fonts t)))
    #+end_src
*** Rainbow mode
    Rainbow mode is nice but do not enable by default
 #+begin_src emacs-lisp
   (use-package rainbow-mode
     :ensure t)
 #+end_src
** Modes
*** peep-dired
  #+begin_src emacs-lisp
    (use-package peep-dired
      :ensure t)
  #+end_src
*** elpy
 #+begin_src emacs-lisp
   (use-package elpy
   :ensure t
   :init
   (elpy-enable))
 #+end_src
   Remove highlighted indentation (clutter)
 #+begin_src emacs-lisp
   (add-hook 'elpy-mode-hook (lambda () (highlight-indentation-mode -1)))
 #+end_src
*** Org mode
    Make tabs behave right in src blocks:
    #+begin_src emacs-lisp
      (setq org-src-tab-acts-natively t)
    #+end_src
    Setup quote font faces
    #+begin_src emacs-lisp
    (setq org-fontify-quote-and-verse-blocks t)
    #+end_src
    Setup context detail
    #+begin_src emacs-lisp
    (push '(tags-tree . local) org-show-context-detail)
    #+end_src
    Setup agenda mode
    #+begin_src emacs-lisp
      (setq org-agenda-files (directory-files-recursively "~/share/personal/" "^[[:alnum:]].*\\.org$"))
      (setq org-agenda-todo-list-sublevels nil)

      (setq org-agenda-skip-deadline-prewarning-if-scheduled t)

      (evil-set-initial-state 'org-agenda-mode 'motion)
    #+end_src
    Setup external programs
    #+begin_src emacs-lisp
      (defun hanmar-open-pdf-link (FILE LINK)
	"Handler for pdf links"
	(let ((page (car (cdr (split-string LINK "::")))))
	  (progn (hanmar-open-pdf-at-page FILE page)
		 (message "%s %s" FILE page))))
      (defun hanmar-open-pdf-at-page (FILE PAGE)
	"Open a pdf at PAGE."
	(call-process-shell-command (concat "evince '" FILE "' -p " PAGE " &") nil 0))

      (add-to-list 'org-file-apps '("\\.pdf\\'" . hanmar-open-pdf-link))

    #+end_src
*** Magit
  #+begin_src emacs-lisp
  (use-package magit
    :ensure t)
  #+end_src
    evil-magit is loaded in [[evil-mode/additions]]

** Utility
*** Try
  #+begin_src emacs-lisp
    (use-package try
      :ensure t)
  #+end_src
*** Babel
    #+BEGIN_SRC emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((python . t)
         (shell . t)))
      (setq org-babel-python-command "python3")
    #+END_SRC
** Misc
*** Aggressive indent mode
 #+begin_src emacs-lisp
   (use-package aggressive-indent
     :ensure t
     :config (global-aggressive-indent-mode t))
 #+end_src
*** flycheck
 #+begin_src emacs-lisp
   (use-package flycheck
     :ensure t
     :diminish
     :init
     (global-flycheck-mode t))
 #+end_src
* Misc
* Key bindings
** Unmap confilcts
   Some keymaps try to overwrite my nice config, dont let them
#+begin_src emacs-lisp
  (evil-global-set-key 'motion " " nil)
  (define-key dired-mode-map "g" nil)
  (define-key dired-mode-map " " nil)
  (define-key image-mode-map "g" nil)
  (define-key image-mode-map " " nil)
  (define-key compilation-mode-map "g" nil)
  (define-key compilation-mode-map " " nil)
  (define-key org-agenda-mode-map " " nil)
  (define-key org-agenda-mode-map "g" nil)
  (define-key evil-normal-state-map "gu" nil)
  (define-key evil-motion-state-map "gk" nil)
#+end_src
** Generic
*** High level
**** Helper functions
  #+begin_src emacs-lisp
    (defun run-make ()
      (interactive)
      (shell-command "make"))
 #+end_src
**** Bindings
 #+begin_src emacs-lisp
   (evil-global-set-key 'motion " a" 'org-agenda-list)
   (evil-global-set-key 'motion " e" 'eval-last-sexp)
   (evil-global-set-key 'visual " e" 'eval-region)
   (evil-global-set-key 'motion " E" 'my-eval-buffer)
   (evil-global-set-key 'motion " f" 'find-file)
   (evil-global-set-key 'motion " g" 'magit-status)
   (evil-global-set-key 'motion " m" 'run-make)
   (evil-global-set-key 'motion " s" 'save-buffer)
   (evil-global-set-key 'motion " k" 'kill-current-buffer)

   ;; Commonly used files and buffers
   (evil-global-set-key 'motion (kbd "<f2>") (lambda () (interactive) (find-file dot-file)))
   (evil-global-set-key 'motion (kbd "<f3>") (lambda () (interactive) (find-file emacs-help-file)))
   (evil-global-set-key 'motion (kbd "<f4>") (lambda () (interactive) (find-file master-help-file)))

   (evil-global-set-key 'motion (kbd " aa") 'org-agenda-list)

   (evil-global-set-key 'motion "gd" (lambda () (interactive) (dired nil)))
 #+end_src 
*** Movement and selection
 #+begin_src emacs-lisp
   (evil-global-set-key 'motion "\C-e" 'evil-scroll-up)
   (evil-global-set-key 'motion "go" 'other-window)
   (evil-global-set-key 'motion "gp" (lambda () (interactive) (other-window -1)))
   (evil-global-set-key 'insert "\C-k" 'previous-line)
   (evil-global-set-key 'insert "\C-j" 'next-line)

   ;; Selection
   (evil-global-set-key 'motion "g+" 'er/expand-region)

 #+end_src 
*** Window management
**** helper functions
  #+begin_src emacs-lisp
    (defhydra hanmar/window-scale (:timeout 5)
      "scale window"
      ("j" evil-window-decrease-height "- height")
      ("k" evil-window-increase-height "+ height")
      ("h" evil-window-decrease-width "- width")
      ("l" evil-window-increase-width "+ width")
      ("=" balance-windows "balance" :exit t)
      ("f" nil "finished" :exit t))

    (defhydra hanmar/update-workgroup (:timeout 10)
      "update workgroup?"
      ("y" (lambda () (interactive) (wg-update-workgroup (wg-current-workgroup))) "yes" :exit t)
      ("n" nil "no" :exit t))
  #+end_src
**** bindings
  #+begin_src emacs-lisp
    (evil-global-set-key 'motion " w " 'hanmar/wg-switch)
    (evil-global-set-key 'motion " ww" 'wg-switch-to-previous-workgroup)
    (evil-global-set-key 'motion " wc" 'wg-create-workgroup)
    (evil-global-set-key 'motion " wu" 'hanmar/update-workgroup/body)
    (evil-global-set-key 'motion " wr" 'wg-revert-workgroup)

    (evil-global-set-key 'motion " ws" 'delete-other-windows)
    (evil-global-set-key 'motion " wd" 'delete-window)
    (evil-global-set-key 'motion " wD" (lambda () (interactive) (kill-current-buffer) (delete-window)))
    (evil-global-set-key 'motion " wh" 'split-window-below)
    (evil-global-set-key 'motion " wv" 'split-window-right)

    (evil-global-set-key 'motion " wf" 'hanmar/window-scale/body)

    (evil-global-set-key 'motion " wn" 'winner-undo)
    (evil-global-set-key 'motion " wm" 'winner-redo)
   #+end_src 
*** Help files
**** helper functions
  #+begin_src emacs-lisp
    (setq help-file-prompt "Help file: ")
    (setq help-file-path "~/share/personal/notes/")


    (defun hanmar/list-help-files ()
      "List existing help files."
      (mapcar (lambda (x) (string-remove-suffix ".org" x))
	      (directory-files help-file-path nil ".*\\.org$")))

    (defun hanmar/open-help-file ()
      (interactive)
      (let* ((input (ivy-read help-file-prompt (hanmar/list-help-files))))
	(find-file (expand-file-name (concat input ".org") help-file-path))))
  #+end_src
**** bindings
  #+begin_src emacs-lisp
  (evil-global-set-key 'motion " h" 'hanmar/open-help-file)
  #+end_src
*** Folding
  #+begin_src emacs-lisp
  (evil-define-key 'motion 'python-mode-map (kbd "TAB") 'yafolding-toggle-element)
  (evil-define-key 'motion 'html-mode-map (kbd "TAB") 'yafolding-toggle-element)
  #+end_src
** Org mode
*** Helper functions
 #+begin_src emacs-lisp
   (defun insert-elisp-block ()
     (interactive)
     (kill-line 0)
     (insert "#+begin_src emacs-lisp\n")
     (insert "#+end_src")
     (evil-open-above 1)
     (insert "  ("))
#+end_src
*** Bindings
#+begin_src emacs-lisp
  (evil-define-key 'insert 'org-mode-map (kbd "C-j") 'next-line)
  (evil-define-key 'insert 'org-mode-map (kbd "C-k") 'previous-line)
  (evil-define-key 'motion 'org-mode-map "gj" 'org-next-visible-heading)
  (evil-define-key 'motion 'org-mode-map "gk" 'org-previous-visible-heading)
  (evil-define-key 'motion 'org-mode-map "gh" 'org-backward-heading-same-level)
  (evil-define-key 'motion 'org-mode-map "gl" 'org-forward-heading-same-level)
  (evil-define-key 'motion 'org-mode-map "gu" 'outline-up-heading)

  (evil-define-key 'motion 'org-mode-map " t" 'org-todo)

  (evil-define-key 'motion 'org-mode-map " os" 'org-store-link)
  (evil-define-key 'motion 'org-mode-map " oi" 'org-insert-last-stored-link)
  (evil-define-key 'motion 'org-mode-map " ol" 'org-insert-link)
 #+end_src
** Org agenda mode
   #+begin_src emacs-lisp
   (evil-define-key 'motion org-agenda-mode-map "h" 'org-agenda-earlier)
   (evil-define-key 'motion org-agenda-mode-map "l" 'org-agenda-later)
   #+end_src   
** dired
*** Bindings
#+begin_src emacs-lisp
   (evil-define-key 'motion dired-mode-map (kbd "TAB") 'dired-maybe-insert-subdir)
 #+end_src
** Magit
   There is a problem where commiting wont work properly, as a
   workaround restore the following key mapping
#+begin_src emacs-lisp
  (evil-global-set-key 'motion "\C-c\C-c" 'with-editor-finish)
#+end_src
** peep-dired
*** helper functions
#+begin_src emacs-lisp
  (defun my-peep-mark-for-deletion ()
    (interactive)
    (dired-flag-file-deletion 1)
    (peep-dired-prev-file)
    (peep-dired-next-file))
#+end_src
**** TODO hook to dired-mark function instead of overwriting spererate bindings
*** bindings
#+begin_src emacs-lisp
  (evil-define-key 'motion peep-dired-mode-map (kbd "<SPC>") 'peep-dired-scroll-page-down
    (kbd "C-<SPC>") 'peep-dired-scroll-page-up
    (kbd "<backspace>") 'peep-dired-scroll-page-up
    (kbd "j") 'peep-dired-next-file
    (kbd "k") 'peep-dired-prev-file
    (kbd "d") 'my-peep-mark-for-deletion)
   (add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+end_src
** gnus
*** helper functions
    #+begin_src emacs-lisp
      (defun my-archive-from-inbox ()
	(interactive)
	(if (equal (buffer-name) "*Summary INBOX*")
	    (progn (let ((gnus-novice-user nil))
			(gnus-summary-delete-article))
		  (message "Article archived."))))

      (defun my-move-to-thrash ()
	(interactive)
	(if (equal (buffer-name) "*Summary INBOX*")
	    (progn (let ((gnus-novice-user nil))
			(gnus-summary-move-article :TO-NEWSGROUP "[Gmail]/Thrash"))
		  (message "Article moved to thrash."))))
    #+end_src
*** bindings
    #+begin_src emacs-lisp
      (define-key gnus-group-mode-map (kbd "k") 'previous-line)
      (define-key gnus-group-mode-map (kbd "j") 'next-line)
      (define-key gnus-group-mode-map (kbd ":") 'evil-ex)

      (define-key gnus-summary-mode-map (kbd "k") 'previous-line)
      (define-key gnus-summary-mode-map (kbd "j") 'next-line)
      (define-key gnus-summary-mode-map (kbd ":") 'evil-ex)

      (define-key gnus-summary-mode-map (kbd "m") 'gnus-summary-mark-as-processable)
      (define-key gnus-summary-mode-map (kbd "u") 'gnus-summary-unmark-as-processable)
      (define-key gnus-summary-mode-map (kbd "r") 'gnus-summary-rescan-group)

      (define-key gnus-summary-mode-map (kbd "a") 'my-archive-from-inbox)
      (define-key gnus-summary-mode-map (kbd "d") 'my-move-to-thrash)

      (setq gnus-process-mark ?m)
    #+end_src

* todos
*** History
*** Python
    [[https://cestlaz.github.io/posts/using-emacs-12-python/]]
    elpy
*** YAsnippet
    [[https://cestlaz.github.io/posts/using-emacs-13-yasnippet/]]
*** Counsel FZF
    [[https://cestlaz.github.io/posts/using-emacs-38-dired/]]
